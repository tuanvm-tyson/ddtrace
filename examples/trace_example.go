// Code generated by gowrap. DO NOT EDIT.
// template: datadog
// gowrap: http://github.com/tyson-tuanvm/gowrap

package examples

//go:generate gowrap gen -p github.com/tuanvm-tyson/ddtrace/examples -i Move -t datadog -o trace_example.go -l ""

import (
	"context"

	"gopkg.in/DataDog/dd-trace-go.v1/ddtrace"
	"gopkg.in/DataDog/dd-trace-go.v1/ddtrace/ext"
	"gopkg.in/DataDog/dd-trace-go.v1/ddtrace/tracer"
)

// MoveWithTracing implements Move interface instrumented with Datadog tracing
type MoveWithTracing struct {
	Move
	_instance      string
	_spanDecorator func(span ddtrace.Span, params, results map[string]interface{})
}

// NewMoveWithTracing returns MoveWithTracing
func NewMoveWithTracing(base Move, instance string, spanDecorator ...func(span ddtrace.Span, params, results map[string]interface{})) MoveWithTracing {
	d := MoveWithTracing{
		Move:      base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Walk implements Move
func (_d MoveWithTracing) Walk(ctx context.Context, distance int) (s1 string) {
	span, ctx := tracer.StartSpanFromContext(ctx, "Move.Walk")
	span.SetTag(ext.ServiceName, _d._instance)
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(span, map[string]interface{}{
				"ctx":      ctx,
				"distance": distance}, map[string]interface{}{
				"s1": s1})
		}
		span.Finish()
	}()
	return _d.Move.Walk(ctx, distance)
}
