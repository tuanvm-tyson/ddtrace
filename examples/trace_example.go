// Code generated by ddtrace. DO NOT EDIT.
// template: datadog
// ddtrace: http://github.com/tyson-tuanvm/ddtrace

package examples


//go:generate ddtrace gen -p github.com/tuanvm-tyson/ddtrace/examples -i Speak,Move -o trace_example.go -l ""


import (
    "context"

    "gopkg.in/DataDog/dd-trace-go.v1/ddtrace"
    "gopkg.in/DataDog/dd-trace-go.v1/ddtrace/ext"
    "gopkg.in/DataDog/dd-trace-go.v1/ddtrace/tracer"
)

type SpeakWithTracing struct {
	Speak
	_spanDecorator func(span ddtrace.Span, params, results map[string]interface{})
}
func NewSpeakWithTracing(base Speak, instance string, spanDecorator ...func(span ddtrace.Span, params, results map[string]interface{})) SpeakWithTracing {
	d := SpeakWithTracing{
		Speak: base,
	}
	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}
	return d
}
func (_d SpeakWithTracing) SayHello(ctx context.Context, name string) (s1 string) {
	span, ctx := tracer.StartSpanFromContext(ctx, "Speak.SayHello")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(span, map[string]interface{}{
				"ctx":  ctx,
				"name": name}, map[string]interface{}{
				"s1": s1})
		}
		span.Finish()
	}()
	return _d.Speak.SayHello(ctx, name)
}

type MoveWithTracing struct {
	Move
	_spanDecorator func(span ddtrace.Span, params, results map[string]interface{})
}
func NewMoveWithTracing(base Move, instance string, spanDecorator ...func(span ddtrace.Span, params, results map[string]interface{})) MoveWithTracing {
	d := MoveWithTracing{
		Move: base,
	}
	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}
	return d
}
func (_d MoveWithTracing) Walk(ctx context.Context, distance int) (s1 string) {
	span, ctx := tracer.StartSpanFromContext(ctx, "Move.Walk")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(span, map[string]interface{}{
				"ctx":      ctx,
				"distance": distance}, map[string]interface{}{
				"s1": s1})
		}
		span.Finish()
	}()
	return _d.Move.Walk(ctx, distance)
}
